###
@graphqlEndpoint =  {{$dotenv HASURA_GRAPHQL_ENDPOINT}}/v1/graphql
@graphqlAdminToken =  {{$dotenv HASURA_GRAPHQL_ADMIN_SECRET}}
@graphqlUserToken =  'get me from OAuth flow'
###

### Pull Schema
# @name IntrospectionQuery
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
X-REQUEST-TYPE: GraphQL

query IntrospectionQuery {
	__schema {
		queryType { name }
		mutationType { name }
		subscriptionType { name }
		directives {
			name
			description
			locations
		}
	}
}

### list all active policies
# @name listPolicies
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
Authorization: Bearer {{graphqlUserToken}}
X-REQUEST-TYPE: GraphQL

query ListPolicies(
  $limit: Int = 50
  $offset: Int = 0
  $orderBy: [tz_policies_order_by!] = [{ updated_at: desc_nulls_last }]
) {
  counts: tz_policies_aggregate(where: { deleted_at: { _is_null: true } }) {
    aggregate {
      count
    }
  }
  tz_policies(
	order_by: $orderBy
    limit: $limit
    offset: $offset
    where: { deleted_at: { _is_null: true } }
  ) {
    id
    display_name
    description
    tags
    annotations
    disabled
    template
    created_at
    created_by
    updated_at
    updated_by
    deleted_at
    valid_from
    valid_to
    subject_display_name
    subject_domain
    subject_id
    subject_secondary_id
    subject_type
    source_address
    source_port
    destination_address
    destination_port
    protocol
    action
    direction
    app_id
    weight
  }
}


{
  "limit": 5,
  "offset": 0
}


### search active policies
# @name searchPolicies
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
X-REQUEST-TYPE: GraphQL

query SearchPolicies(
  $where: tz_policies_bool_exp
  $limit: Int = 50
  $offset: Int = 0
  $orderBy: [tz_policies_order_by!] = [{ updated_at: desc_nulls_last }]
) {
  counts: tz_policies_aggregate(where: $where) {
    aggregate {
      count
    }
  }
  tz_policies(
    order_by: $orderBy
    limit: $limit
    offset: $offset
    where: $where
  ) {
    id
    display_name
    description
    tags
    annotations
    disabled
    template
    created_at
    updated_at
    valid_from
    valid_to
    subject_display_name
    subject_domain
    subject_id
    subject_secondary_id
    subject_type
    source_address
    source_port
    destination_address
    destination_port
    protocol
    action
    direction
    app_id
    weight
  }
}


{
  "where": {
    "deleted_at": { "_is_null": true },
    "subject_type": { "_eq": "subject_type_user" },
    "display_name": { "_like": "%user%" }
  },
  "limit": 2,
  "orderBy": [{ "updated_at": "desc_nulls_last" }]
}

###
@firstPoliciyId =  {{listPolicies.response.body.$.data.tz_policies[0].id}}
###

### getPolicy by Id
# @name getPolicy
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
X-REQUEST-TYPE: GraphQL

query GetPolicy($id: uuid!) {
  tz_policies_by_pk(id: $id) {
    id
    display_name
    description
    tags
    annotations
    disabled
    template
    created_at
    created_by
    updated_at
    updated_by
    deleted_at
    valid_from
    valid_to
    subject_display_name
    subject_domain
    subject_id
    subject_secondary_id
    subject_type
    source_address
    source_port
    destination_address
    destination_port
    protocol
    action
    direction
    app_id
    weight
  }
}


{
  "id": "{{firstPoliciyId}}"
}

### update policiy by ID
# @name updatePolicy
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
X-REQUEST-TYPE: GraphQL

mutation UpdatePolicy($id: uuid!, $data: tz_policies_set_input!) {
  update_tz_policies_by_pk(pk_columns: { id: $id }, _set: $data) {
    id,
	display_name,
    updated_at
  }
}

{
  "id":"{{firstPoliciyId}}",
  "data":{
    "updated_by":"demo@gmail.com",
	"description":"user 1 policy v2",
    "tags":"{tz,us}",
    "annotations":"\"sumo\"=>\"demo1\""
  }
}

### create new policiy
# @name createPolicy
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
X-REQUEST-TYPE: GraphQL

mutation CreatePolicy($data: tz_policies_insert_input!) {
  insert_tz_policies_one(object: $data) {
    id,
	display_name,
	updated_at
  }
}

{
  "data":{
    "id":"{{$guid}}",
    "display_name":"user 1",
    "description":"user 1 policy",
    "tags":"{tz,us}",
    "annotations":"\"sumo\"=>\"demo\"",
    "subject_id":"6e9bf365-8c09-4dd9-b9b2-83f6ab315618",
    "subject_secondary_id":"sumo@chintagunta.com",
    "subject_display_name":"sumanth chinthagunta",
    "subject_type":"subject_type_user",
    "subject_domain":"chintagunta.com",
    "source_address":"0.0.0.0",
    "source_port":"5000",
    "destination_address":"1.1.1.1",
    "destination_port":"443",
    "app_id":"myapp.exe",
	"created_by":"sumo@gmail.com",
    "updated_by":"sumo@gmail.com",
    "valid_from":"{{$datetime rfc1123|iso8601 [offset option]}}"
  }
}

###
@createdPoliciyId =  {{createPolicy.response.body.$.data.insert_tz_policies_one.id}}
###

### delete policiy
# @name deletePolicy
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
X-REQUEST-TYPE: GraphQL

mutation DeletePolicy($id:uuid!) {
  delete_tz_policies_by_pk(id:  $id) {
      display_name
  }
}

{
  "id": "{{createdPoliciyId}}"
}
