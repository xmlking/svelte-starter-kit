schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

input ListUniversitiesInput {
  country: String
  name: String
}

type ListUniversitiesOutput {
  alpha_two_code: String
  country: String
  domains: [String!]!
  name: String
  stateprovince: String
  web_pages: [String!]!
}

input SearchRestroomsInput {
  city: String
  limit: Int
  offset: Int
  page: Int
}

type SearchRestroomsOutput {
  accessible: Boolean
  approved: Boolean
  changing_table: Boolean
  city: String
  comment: String
  country: String
  created_at: String
  directions: String
  downvote: Int
  edit_id: Int
  id: Int
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  unisex: Boolean
  updated_at: String
  upvote: Int
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar _text

"""
Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'.
"""
input _text_comparison_exp {
  _eq: _text
  _gt: _text
  _gte: _text
  _in: [_text!]
  _is_null: Boolean
  _lt: _text
  _lte: _text
  _neq: _text
  _nin: [_text!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar hstore

"""
Boolean expression to compare columns of type "hstore". All fields are combined with logical 'AND'.
"""
input hstore_comparison_exp {
  _eq: hstore
  _gt: hstore
  _gte: hstore
  _in: [hstore!]
  _is_null: Boolean
  _lt: hstore
  _lte: hstore
  _neq: hstore
  _nin: [hstore!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "organization"
  """
  delete_organization(
    """filter the rows which have to be deleted"""
    where: organization_bool_exp!
  ): organization_mutation_response

  """
  delete single row from the table: "organization"
  """
  delete_organization_by_pk(value: String!): organization

  """
  delete data from the table: "policies"
  """
  delete_policies(
    """filter the rows which have to be deleted"""
    where: policies_bool_exp!
  ): policies_mutation_response

  """
  delete single row from the table: "policies"
  """
  delete_policies_by_pk(id: uuid!): policies

  """
  insert data into the table: "organization"
  """
  insert_organization(
    """the rows to be inserted"""
    objects: [organization_insert_input!]!

    """upsert condition"""
    on_conflict: organization_on_conflict
  ): organization_mutation_response

  """
  insert a single row into the table: "organization"
  """
  insert_organization_one(
    """the row to be inserted"""
    object: organization_insert_input!

    """upsert condition"""
    on_conflict: organization_on_conflict
  ): organization

  """
  insert data into the table: "policies"
  """
  insert_policies(
    """the rows to be inserted"""
    objects: [policies_insert_input!]!

    """upsert condition"""
    on_conflict: policies_on_conflict
  ): policies_mutation_response

  """
  insert a single row into the table: "policies"
  """
  insert_policies_one(
    """the row to be inserted"""
    object: policies_insert_input!

    """upsert condition"""
    on_conflict: policies_on_conflict
  ): policies

  """
  update data of the table: "organization"
  """
  update_organization(
    """sets the columns of the filtered rows to the given values"""
    _set: organization_set_input

    """filter the rows which have to be updated"""
    where: organization_bool_exp!
  ): organization_mutation_response

  """
  update single row of the table: "organization"
  """
  update_organization_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: organization_set_input
    pk_columns: organization_pk_columns_input!
  ): organization

  """
  update multiples rows of table: "organization"
  """
  update_organization_many(
    """updates to execute, in order"""
    updates: [organization_updates!]!
  ): [organization_mutation_response]

  """
  update data of the table: "policies"
  """
  update_policies(
    """increments the numeric columns with given value of the filtered values"""
    _inc: policies_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: policies_set_input

    """filter the rows which have to be updated"""
    where: policies_bool_exp!
  ): policies_mutation_response

  """
  update single row of the table: "policies"
  """
  update_policies_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: policies_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: policies_set_input
    pk_columns: policies_pk_columns_input!
  ): policies

  """
  update multiples rows of table: "policies"
  """
  update_policies_many(
    """updates to execute, in order"""
    updates: [policies_updates!]!
  ): [policies_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""organizations are enums"""
type organization {
  description: String!
  value: String!
}

"""
aggregated selection of "organization"
"""
type organization_aggregate {
  aggregate: organization_aggregate_fields
  nodes: [organization!]!
}

"""
aggregate fields of "organization"
"""
type organization_aggregate_fields {
  count(columns: [organization_select_column!], distinct: Boolean): Int!
  max: organization_max_fields
  min: organization_min_fields
}

"""
Boolean expression to filter rows from the table "organization". All fields are combined with a logical 'AND'.
"""
input organization_bool_exp {
  _and: [organization_bool_exp!]
  _not: organization_bool_exp
  _or: [organization_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "organization"
"""
enum organization_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  organization_pkey
}

enum organization_enum {
  """chinthagunta org"""
  chinthagunta

  """example org"""
  example
}

"""
Boolean expression to compare columns of type "organization_enum". All fields are combined with logical 'AND'.
"""
input organization_enum_comparison_exp {
  _eq: organization_enum
  _in: [organization_enum!]
  _is_null: Boolean
  _neq: organization_enum
  _nin: [organization_enum!]
}

"""
input type for inserting data into table "organization"
"""
input organization_insert_input {
  description: String
  value: String
}

"""aggregate max on columns"""
type organization_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type organization_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "organization"
"""
type organization_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [organization!]!
}

"""
on_conflict condition type for table "organization"
"""
input organization_on_conflict {
  constraint: organization_constraint!
  update_columns: [organization_update_column!]! = []
  where: organization_bool_exp
}

"""Ordering options when selecting data from "organization"."""
input organization_order_by {
  description: order_by
  value: order_by
}

"""primary key columns input for table: organization"""
input organization_pk_columns_input {
  value: String!
}

"""
select columns of table "organization"
"""
enum organization_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "organization"
"""
input organization_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "organization"
"""
input organization_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: organization_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input organization_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "organization"
"""
enum organization_update_column {
  """column name"""
  description

  """column name"""
  value
}

input organization_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: organization_set_input

  """filter the rows which have to be updated"""
  where: organization_bool_exp!
}

"""This is policy table."""
type policies {
  action: String!
  annotations: hstore
  appId: String
  createdAt: timestamptz!
  createdBy: String!
  deletedAt: timestamptz
  description: String
  destinationAddress: String
  destinationPort: String
  direction: String!
  disabled: Boolean
  displayName: String!
  id: uuid!
  protocol: String
  sourceAddress: String
  sourcePort: String
  subjectDisplayName: String
  subjectDomain: organization_enum
  subjectId: String!
  subjectSecondaryId: String
  subjectType: String
  tags: _text
  template: Boolean
  updatedAt: timestamptz!
  updatedBy: String!
  validFrom: timestamptz
  validTo: timestamptz
  weight: Int
}

"""
aggregated selection of "policies"
"""
type policies_aggregate {
  aggregate: policies_aggregate_fields
  nodes: [policies!]!
}

"""
aggregate fields of "policies"
"""
type policies_aggregate_fields {
  avg: policies_avg_fields
  count(columns: [policies_select_column!], distinct: Boolean): Int!
  max: policies_max_fields
  min: policies_min_fields
  stddev: policies_stddev_fields
  stddev_pop: policies_stddev_pop_fields
  stddev_samp: policies_stddev_samp_fields
  sum: policies_sum_fields
  var_pop: policies_var_pop_fields
  var_samp: policies_var_samp_fields
  variance: policies_variance_fields
}

"""aggregate avg on columns"""
type policies_avg_fields {
  weight: Float
}

"""
Boolean expression to filter rows from the table "policies". All fields are combined with a logical 'AND'.
"""
input policies_bool_exp {
  _and: [policies_bool_exp!]
  _not: policies_bool_exp
  _or: [policies_bool_exp!]
  action: String_comparison_exp
  annotations: hstore_comparison_exp
  appId: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  createdBy: String_comparison_exp
  deletedAt: timestamptz_comparison_exp
  description: String_comparison_exp
  destinationAddress: String_comparison_exp
  destinationPort: String_comparison_exp
  direction: String_comparison_exp
  disabled: Boolean_comparison_exp
  displayName: String_comparison_exp
  id: uuid_comparison_exp
  protocol: String_comparison_exp
  sourceAddress: String_comparison_exp
  sourcePort: String_comparison_exp
  subjectDisplayName: String_comparison_exp
  subjectDomain: organization_enum_comparison_exp
  subjectId: String_comparison_exp
  subjectSecondaryId: String_comparison_exp
  subjectType: String_comparison_exp
  tags: _text_comparison_exp
  template: Boolean_comparison_exp
  updatedAt: timestamptz_comparison_exp
  updatedBy: String_comparison_exp
  validFrom: timestamptz_comparison_exp
  validTo: timestamptz_comparison_exp
  weight: Int_comparison_exp
}

"""
unique or primary key constraints on table "policies"
"""
enum policies_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  policies_pkey
}

"""
input type for incrementing numeric columns in table "policies"
"""
input policies_inc_input {
  weight: Int
}

"""
input type for inserting data into table "policies"
"""
input policies_insert_input {
  action: String
  annotations: hstore
  appId: String
  createdAt: timestamptz
  createdBy: String
  deletedAt: timestamptz
  description: String
  destinationAddress: String
  destinationPort: String
  direction: String
  disabled: Boolean
  displayName: String
  id: uuid
  protocol: String
  sourceAddress: String
  sourcePort: String
  subjectDisplayName: String
  subjectDomain: organization_enum
  subjectId: String
  subjectSecondaryId: String
  subjectType: String
  tags: _text
  template: Boolean
  updatedAt: timestamptz
  updatedBy: String
  validFrom: timestamptz
  validTo: timestamptz
  weight: Int
}

"""aggregate max on columns"""
type policies_max_fields {
  action: String
  appId: String
  createdAt: timestamptz
  createdBy: String
  deletedAt: timestamptz
  description: String
  destinationAddress: String
  destinationPort: String
  direction: String
  displayName: String
  id: uuid
  protocol: String
  sourceAddress: String
  sourcePort: String
  subjectDisplayName: String
  subjectId: String
  subjectSecondaryId: String
  subjectType: String
  updatedAt: timestamptz
  updatedBy: String
  validFrom: timestamptz
  validTo: timestamptz
  weight: Int
}

"""aggregate min on columns"""
type policies_min_fields {
  action: String
  appId: String
  createdAt: timestamptz
  createdBy: String
  deletedAt: timestamptz
  description: String
  destinationAddress: String
  destinationPort: String
  direction: String
  displayName: String
  id: uuid
  protocol: String
  sourceAddress: String
  sourcePort: String
  subjectDisplayName: String
  subjectId: String
  subjectSecondaryId: String
  subjectType: String
  updatedAt: timestamptz
  updatedBy: String
  validFrom: timestamptz
  validTo: timestamptz
  weight: Int
}

"""
response of any mutation on the table "policies"
"""
type policies_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [policies!]!
}

"""
on_conflict condition type for table "policies"
"""
input policies_on_conflict {
  constraint: policies_constraint!
  update_columns: [policies_update_column!]! = []
  where: policies_bool_exp
}

"""Ordering options when selecting data from "policies"."""
input policies_order_by {
  action: order_by
  annotations: order_by
  appId: order_by
  createdAt: order_by
  createdBy: order_by
  deletedAt: order_by
  description: order_by
  destinationAddress: order_by
  destinationPort: order_by
  direction: order_by
  disabled: order_by
  displayName: order_by
  id: order_by
  protocol: order_by
  sourceAddress: order_by
  sourcePort: order_by
  subjectDisplayName: order_by
  subjectDomain: order_by
  subjectId: order_by
  subjectSecondaryId: order_by
  subjectType: order_by
  tags: order_by
  template: order_by
  updatedAt: order_by
  updatedBy: order_by
  validFrom: order_by
  validTo: order_by
  weight: order_by
}

"""primary key columns input for table: policies"""
input policies_pk_columns_input {
  id: uuid!
}

"""
select columns of table "policies"
"""
enum policies_select_column {
  """column name"""
  action

  """column name"""
  annotations

  """column name"""
  appId

  """column name"""
  createdAt

  """column name"""
  createdBy

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  destinationAddress

  """column name"""
  destinationPort

  """column name"""
  direction

  """column name"""
  disabled

  """column name"""
  displayName

  """column name"""
  id

  """column name"""
  protocol

  """column name"""
  sourceAddress

  """column name"""
  sourcePort

  """column name"""
  subjectDisplayName

  """column name"""
  subjectDomain

  """column name"""
  subjectId

  """column name"""
  subjectSecondaryId

  """column name"""
  subjectType

  """column name"""
  tags

  """column name"""
  template

  """column name"""
  updatedAt

  """column name"""
  updatedBy

  """column name"""
  validFrom

  """column name"""
  validTo

  """column name"""
  weight
}

"""
input type for updating data in table "policies"
"""
input policies_set_input {
  action: String
  annotations: hstore
  appId: String
  createdAt: timestamptz
  createdBy: String
  deletedAt: timestamptz
  description: String
  destinationAddress: String
  destinationPort: String
  direction: String
  disabled: Boolean
  displayName: String
  id: uuid
  protocol: String
  sourceAddress: String
  sourcePort: String
  subjectDisplayName: String
  subjectDomain: organization_enum
  subjectId: String
  subjectSecondaryId: String
  subjectType: String
  tags: _text
  template: Boolean
  updatedAt: timestamptz
  updatedBy: String
  validFrom: timestamptz
  validTo: timestamptz
  weight: Int
}

"""aggregate stddev on columns"""
type policies_stddev_fields {
  weight: Float
}

"""aggregate stddev_pop on columns"""
type policies_stddev_pop_fields {
  weight: Float
}

"""aggregate stddev_samp on columns"""
type policies_stddev_samp_fields {
  weight: Float
}

"""
Streaming cursor of the table "policies"
"""
input policies_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: policies_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input policies_stream_cursor_value_input {
  action: String
  annotations: hstore
  appId: String
  createdAt: timestamptz
  createdBy: String
  deletedAt: timestamptz
  description: String
  destinationAddress: String
  destinationPort: String
  direction: String
  disabled: Boolean
  displayName: String
  id: uuid
  protocol: String
  sourceAddress: String
  sourcePort: String
  subjectDisplayName: String
  subjectDomain: organization_enum
  subjectId: String
  subjectSecondaryId: String
  subjectType: String
  tags: _text
  template: Boolean
  updatedAt: timestamptz
  updatedBy: String
  validFrom: timestamptz
  validTo: timestamptz
  weight: Int
}

"""aggregate sum on columns"""
type policies_sum_fields {
  weight: Int
}

"""
update columns of table "policies"
"""
enum policies_update_column {
  """column name"""
  action

  """column name"""
  annotations

  """column name"""
  appId

  """column name"""
  createdAt

  """column name"""
  createdBy

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  destinationAddress

  """column name"""
  destinationPort

  """column name"""
  direction

  """column name"""
  disabled

  """column name"""
  displayName

  """column name"""
  id

  """column name"""
  protocol

  """column name"""
  sourceAddress

  """column name"""
  sourcePort

  """column name"""
  subjectDisplayName

  """column name"""
  subjectDomain

  """column name"""
  subjectId

  """column name"""
  subjectSecondaryId

  """column name"""
  subjectType

  """column name"""
  tags

  """column name"""
  template

  """column name"""
  updatedAt

  """column name"""
  updatedBy

  """column name"""
  validFrom

  """column name"""
  validTo

  """column name"""
  weight
}

input policies_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: policies_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: policies_set_input

  """filter the rows which have to be updated"""
  where: policies_bool_exp!
}

"""aggregate var_pop on columns"""
type policies_var_pop_fields {
  weight: Float
}

"""aggregate var_samp on columns"""
type policies_var_samp_fields {
  weight: Float
}

"""aggregate variance on columns"""
type policies_variance_fields {
  weight: Float
}

type query_root {
  """Universities API"""
  ListUniversities(arg1: ListUniversitiesInput!): [ListUniversitiesOutput]

  """Restrooms API"""
  SearchRestrooms(arg1: SearchRestroomsInput!): [SearchRestroomsOutput]

  """
  fetch data from the table: "organization"
  """
  organization(
    """distinct select on columns"""
    distinct_on: [organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_order_by!]

    """filter the rows returned"""
    where: organization_bool_exp
  ): [organization!]!

  """
  fetch aggregated fields from the table: "organization"
  """
  organization_aggregate(
    """distinct select on columns"""
    distinct_on: [organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_order_by!]

    """filter the rows returned"""
    where: organization_bool_exp
  ): organization_aggregate!

  """fetch data from the table: "organization" using primary key columns"""
  organization_by_pk(value: String!): organization

  """
  fetch data from the table: "policies"
  """
  policies(
    """distinct select on columns"""
    distinct_on: [policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [policies_order_by!]

    """filter the rows returned"""
    where: policies_bool_exp
  ): [policies!]!

  """
  fetch aggregated fields from the table: "policies"
  """
  policies_aggregate(
    """distinct select on columns"""
    distinct_on: [policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [policies_order_by!]

    """filter the rows returned"""
    where: policies_bool_exp
  ): policies_aggregate!

  """fetch data from the table: "policies" using primary key columns"""
  policies_by_pk(id: uuid!): policies
}

type subscription_root {
  """
  fetch data from the table: "organization"
  """
  organization(
    """distinct select on columns"""
    distinct_on: [organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_order_by!]

    """filter the rows returned"""
    where: organization_bool_exp
  ): [organization!]!

  """
  fetch aggregated fields from the table: "organization"
  """
  organization_aggregate(
    """distinct select on columns"""
    distinct_on: [organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_order_by!]

    """filter the rows returned"""
    where: organization_bool_exp
  ): organization_aggregate!

  """fetch data from the table: "organization" using primary key columns"""
  organization_by_pk(value: String!): organization

  """
  fetch data from the table in a streaming manner: "organization"
  """
  organization_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [organization_stream_cursor_input]!

    """filter the rows returned"""
    where: organization_bool_exp
  ): [organization!]!

  """
  fetch data from the table: "policies"
  """
  policies(
    """distinct select on columns"""
    distinct_on: [policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [policies_order_by!]

    """filter the rows returned"""
    where: policies_bool_exp
  ): [policies!]!

  """
  fetch aggregated fields from the table: "policies"
  """
  policies_aggregate(
    """distinct select on columns"""
    distinct_on: [policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [policies_order_by!]

    """filter the rows returned"""
    where: policies_bool_exp
  ): policies_aggregate!

  """fetch data from the table: "policies" using primary key columns"""
  policies_by_pk(id: uuid!): policies

  """
  fetch data from the table in a streaming manner: "policies"
  """
  policies_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [policies_stream_cursor_input]!

    """filter the rows returned"""
    where: policies_bool_exp
  ): [policies!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
