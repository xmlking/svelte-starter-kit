schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

input ListUniversitiesInput {
  country: String
  name: String
}

type ListUniversitiesOutput {
  alpha_two_code: String
  country: String
  domains: [String!]!
  name: String
  stateprovince: String
  web_pages: [String!]!
}

input SearchRestroomsInput {
  city: String
  limit: Int
  offset: Int
  page: Int
}

type SearchRestroomsOutput {
  accessible: Boolean
  approved: Boolean
  changing_table: Boolean
  city: String
  comment: String
  country: String
  created_at: String
  directions: String
  downvote: Int
  edit_id: Int
  id: Int
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  unisex: Boolean
  updated_at: String
  upvote: Int
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar _text

"""
Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'.
"""
input _text_comparison_exp {
  _eq: _text
  _gt: _text
  _gte: _text
  _in: [_text!]
  _is_null: Boolean
  _lt: _text
  _lte: _text
  _neq: _text
  _nin: [_text!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar hstore

"""
Boolean expression to compare columns of type "hstore". All fields are combined with logical 'AND'.
"""
input hstore_comparison_exp {
  _eq: hstore
  _gt: hstore
  _gte: hstore
  _in: [hstore!]
  _is_null: Boolean
  _lt: hstore
  _lte: hstore
  _neq: hstore
  _nin: [hstore!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "policies"
  """
  delete_policies(
    """filter the rows which have to be deleted"""
    where: policies_bool_exp!
  ): policies_mutation_response

  """
  delete single row from the table: "policies"
  """
  delete_policies_by_pk(id: uuid!): policies

  """
  insert data into the table: "policies"
  """
  insert_policies(
    """the rows to be inserted"""
    objects: [policies_insert_input!]!

    """upsert condition"""
    on_conflict: policies_on_conflict
  ): policies_mutation_response

  """
  insert a single row into the table: "policies"
  """
  insert_policies_one(
    """the row to be inserted"""
    object: policies_insert_input!

    """upsert condition"""
    on_conflict: policies_on_conflict
  ): policies

  """
  update data of the table: "policies"
  """
  update_policies(
    """increments the numeric columns with given value of the filtered values"""
    _inc: policies_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: policies_set_input

    """filter the rows which have to be updated"""
    where: policies_bool_exp!
  ): policies_mutation_response

  """
  update single row of the table: "policies"
  """
  update_policies_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: policies_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: policies_set_input
    pk_columns: policies_pk_columns_input!
  ): policies

  """
  update multiples rows of table: "policies"
  """
  update_policies_many(
    """updates to execute, in order"""
    updates: [policies_updates!]!
  ): [policies_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""This is policy table."""
type policies {
  action: String!
  annotations: hstore
  app_id: String
  created_at: timestamptz!
  created_by: String!
  deleted_at: timestamptz
  description: String
  destination_address: String
  destination_port: String
  direction: String!
  disabled: Boolean
  display_name: String!
  id: uuid!
  protocol: String
  source_address: String
  source_port: String
  subject_display_name: String
  subject_domain: String
  subject_id: String!
  subject_secondary_id: String
  subject_type: String
  tags: _text
  template: Boolean
  updated_at: timestamptz!
  updated_by: String!
  valid_from: timestamptz
  valid_to: timestamptz
  weight: Int
}

"""
aggregated selection of "policies"
"""
type policies_aggregate {
  aggregate: policies_aggregate_fields
  nodes: [policies!]!
}

"""
aggregate fields of "policies"
"""
type policies_aggregate_fields {
  avg: policies_avg_fields
  count(columns: [policies_select_column!], distinct: Boolean): Int!
  max: policies_max_fields
  min: policies_min_fields
  stddev: policies_stddev_fields
  stddev_pop: policies_stddev_pop_fields
  stddev_samp: policies_stddev_samp_fields
  sum: policies_sum_fields
  var_pop: policies_var_pop_fields
  var_samp: policies_var_samp_fields
  variance: policies_variance_fields
}

"""aggregate avg on columns"""
type policies_avg_fields {
  weight: Float
}

"""
Boolean expression to filter rows from the table "policies". All fields are combined with a logical 'AND'.
"""
input policies_bool_exp {
  _and: [policies_bool_exp!]
  _not: policies_bool_exp
  _or: [policies_bool_exp!]
  action: String_comparison_exp
  annotations: hstore_comparison_exp
  app_id: String_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by: String_comparison_exp
  deleted_at: timestamptz_comparison_exp
  description: String_comparison_exp
  destination_address: String_comparison_exp
  destination_port: String_comparison_exp
  direction: String_comparison_exp
  disabled: Boolean_comparison_exp
  display_name: String_comparison_exp
  id: uuid_comparison_exp
  protocol: String_comparison_exp
  source_address: String_comparison_exp
  source_port: String_comparison_exp
  subject_display_name: String_comparison_exp
  subject_domain: String_comparison_exp
  subject_id: String_comparison_exp
  subject_secondary_id: String_comparison_exp
  subject_type: String_comparison_exp
  tags: _text_comparison_exp
  template: Boolean_comparison_exp
  updated_at: timestamptz_comparison_exp
  updated_by: String_comparison_exp
  valid_from: timestamptz_comparison_exp
  valid_to: timestamptz_comparison_exp
  weight: Int_comparison_exp
}

"""
unique or primary key constraints on table "policies"
"""
enum policies_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  policies_pkey
}

"""
input type for incrementing numeric columns in table "policies"
"""
input policies_inc_input {
  weight: Int
}

"""
input type for inserting data into table "policies"
"""
input policies_insert_input {
  action: String
  annotations: hstore
  app_id: String
  created_at: timestamptz
  created_by: String
  deleted_at: timestamptz
  description: String
  destination_address: String
  destination_port: String
  direction: String
  disabled: Boolean
  display_name: String
  id: uuid
  protocol: String
  source_address: String
  source_port: String
  subject_display_name: String
  subject_domain: String
  subject_id: String
  subject_secondary_id: String
  subject_type: String
  tags: _text
  template: Boolean
  updated_at: timestamptz
  updated_by: String
  valid_from: timestamptz
  valid_to: timestamptz
  weight: Int
}

"""aggregate max on columns"""
type policies_max_fields {
  action: String
  app_id: String
  created_at: timestamptz
  created_by: String
  deleted_at: timestamptz
  description: String
  destination_address: String
  destination_port: String
  direction: String
  display_name: String
  id: uuid
  protocol: String
  source_address: String
  source_port: String
  subject_display_name: String
  subject_domain: String
  subject_id: String
  subject_secondary_id: String
  subject_type: String
  updated_at: timestamptz
  updated_by: String
  valid_from: timestamptz
  valid_to: timestamptz
  weight: Int
}

"""aggregate min on columns"""
type policies_min_fields {
  action: String
  app_id: String
  created_at: timestamptz
  created_by: String
  deleted_at: timestamptz
  description: String
  destination_address: String
  destination_port: String
  direction: String
  display_name: String
  id: uuid
  protocol: String
  source_address: String
  source_port: String
  subject_display_name: String
  subject_domain: String
  subject_id: String
  subject_secondary_id: String
  subject_type: String
  updated_at: timestamptz
  updated_by: String
  valid_from: timestamptz
  valid_to: timestamptz
  weight: Int
}

"""
response of any mutation on the table "policies"
"""
type policies_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [policies!]!
}

"""
on_conflict condition type for table "policies"
"""
input policies_on_conflict {
  constraint: policies_constraint!
  update_columns: [policies_update_column!]! = []
  where: policies_bool_exp
}

"""Ordering options when selecting data from "policies"."""
input policies_order_by {
  action: order_by
  annotations: order_by
  app_id: order_by
  created_at: order_by
  created_by: order_by
  deleted_at: order_by
  description: order_by
  destination_address: order_by
  destination_port: order_by
  direction: order_by
  disabled: order_by
  display_name: order_by
  id: order_by
  protocol: order_by
  source_address: order_by
  source_port: order_by
  subject_display_name: order_by
  subject_domain: order_by
  subject_id: order_by
  subject_secondary_id: order_by
  subject_type: order_by
  tags: order_by
  template: order_by
  updated_at: order_by
  updated_by: order_by
  valid_from: order_by
  valid_to: order_by
  weight: order_by
}

"""primary key columns input for table: policies"""
input policies_pk_columns_input {
  id: uuid!
}

"""
select columns of table "policies"
"""
enum policies_select_column {
  """column name"""
  action

  """column name"""
  annotations

  """column name"""
  app_id

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  destination_address

  """column name"""
  destination_port

  """column name"""
  direction

  """column name"""
  disabled

  """column name"""
  display_name

  """column name"""
  id

  """column name"""
  protocol

  """column name"""
  source_address

  """column name"""
  source_port

  """column name"""
  subject_display_name

  """column name"""
  subject_domain

  """column name"""
  subject_id

  """column name"""
  subject_secondary_id

  """column name"""
  subject_type

  """column name"""
  tags

  """column name"""
  template

  """column name"""
  updated_at

  """column name"""
  updated_by

  """column name"""
  valid_from

  """column name"""
  valid_to

  """column name"""
  weight
}

"""
input type for updating data in table "policies"
"""
input policies_set_input {
  action: String
  annotations: hstore
  app_id: String
  created_at: timestamptz
  created_by: String
  deleted_at: timestamptz
  description: String
  destination_address: String
  destination_port: String
  direction: String
  disabled: Boolean
  display_name: String
  id: uuid
  protocol: String
  source_address: String
  source_port: String
  subject_display_name: String
  subject_domain: String
  subject_id: String
  subject_secondary_id: String
  subject_type: String
  tags: _text
  template: Boolean
  updated_at: timestamptz
  updated_by: String
  valid_from: timestamptz
  valid_to: timestamptz
  weight: Int
}

"""aggregate stddev on columns"""
type policies_stddev_fields {
  weight: Float
}

"""aggregate stddev_pop on columns"""
type policies_stddev_pop_fields {
  weight: Float
}

"""aggregate stddev_samp on columns"""
type policies_stddev_samp_fields {
  weight: Float
}

"""
Streaming cursor of the table "policies"
"""
input policies_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: policies_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input policies_stream_cursor_value_input {
  action: String
  annotations: hstore
  app_id: String
  created_at: timestamptz
  created_by: String
  deleted_at: timestamptz
  description: String
  destination_address: String
  destination_port: String
  direction: String
  disabled: Boolean
  display_name: String
  id: uuid
  protocol: String
  source_address: String
  source_port: String
  subject_display_name: String
  subject_domain: String
  subject_id: String
  subject_secondary_id: String
  subject_type: String
  tags: _text
  template: Boolean
  updated_at: timestamptz
  updated_by: String
  valid_from: timestamptz
  valid_to: timestamptz
  weight: Int
}

"""aggregate sum on columns"""
type policies_sum_fields {
  weight: Int
}

"""
update columns of table "policies"
"""
enum policies_update_column {
  """column name"""
  action

  """column name"""
  annotations

  """column name"""
  app_id

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  destination_address

  """column name"""
  destination_port

  """column name"""
  direction

  """column name"""
  disabled

  """column name"""
  display_name

  """column name"""
  id

  """column name"""
  protocol

  """column name"""
  source_address

  """column name"""
  source_port

  """column name"""
  subject_display_name

  """column name"""
  subject_domain

  """column name"""
  subject_id

  """column name"""
  subject_secondary_id

  """column name"""
  subject_type

  """column name"""
  tags

  """column name"""
  template

  """column name"""
  updated_at

  """column name"""
  updated_by

  """column name"""
  valid_from

  """column name"""
  valid_to

  """column name"""
  weight
}

input policies_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: policies_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: policies_set_input
  where: policies_bool_exp!
}

"""aggregate var_pop on columns"""
type policies_var_pop_fields {
  weight: Float
}

"""aggregate var_samp on columns"""
type policies_var_samp_fields {
  weight: Float
}

"""aggregate variance on columns"""
type policies_variance_fields {
  weight: Float
}

type query_root {
  """Universities API"""
  ListUniversities(arg1: ListUniversitiesInput!): [ListUniversitiesOutput]

  """Restrooms API"""
  SearchRestrooms(arg1: SearchRestroomsInput!): [SearchRestroomsOutput]

  """
  fetch data from the table: "policies"
  """
  policies(
    """distinct select on columns"""
    distinct_on: [policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [policies_order_by!]

    """filter the rows returned"""
    where: policies_bool_exp
  ): [policies!]!

  """
  fetch aggregated fields from the table: "policies"
  """
  policies_aggregate(
    """distinct select on columns"""
    distinct_on: [policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [policies_order_by!]

    """filter the rows returned"""
    where: policies_bool_exp
  ): policies_aggregate!

  """fetch data from the table: "policies" using primary key columns"""
  policies_by_pk(id: uuid!): policies
}

type subscription_root {
  """
  fetch data from the table: "policies"
  """
  policies(
    """distinct select on columns"""
    distinct_on: [policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [policies_order_by!]

    """filter the rows returned"""
    where: policies_bool_exp
  ): [policies!]!

  """
  fetch aggregated fields from the table: "policies"
  """
  policies_aggregate(
    """distinct select on columns"""
    distinct_on: [policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [policies_order_by!]

    """filter the rows returned"""
    where: policies_bool_exp
  ): policies_aggregate!

  """fetch data from the table: "policies" using primary key columns"""
  policies_by_pk(id: uuid!): policies

  """
  fetch data from the table in a streaming manner: "policies"
  """
  policies_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [policies_stream_cursor_input]!

    """filter the rows returned"""
    where: policies_bool_exp
  ): [policies!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
