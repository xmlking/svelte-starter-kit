- name: countries
  definition:
    url: https://countries.trevorblades.com/graphql
    timeout_seconds: 60
    customization: {}
  permissions:
    - role: viewer
      definition:
        schema: |
          schema {
            query: Query
          }
          scalar _Any
          type Continent {
            code: ID!
            countries: [Country!]!
            name: String!
          }
          type Country {
            capital: String
            code: ID!
            continent: Continent!
            currency: String
            emoji: String!
            emojiU: String!
            languages: [Language!]!
            name: String!
            native: String!
            phone: String!
            states: [State!]!
          }
          type Language {
            code: ID!
            name: String
            native: String
            rtl: Boolean!
          }
          type Query {
            _entities(representations: [_Any!]!): [_Entity]!
            _service: _Service!
            continent(code: ID!): Continent
            continents(filter: ContinentFilterInput): [Continent!]!
            countries(filter: CountryFilterInput): [Country!]!
            country(code: ID!): Country
            language(code: ID!): Language
            languages(filter: LanguageFilterInput): [Language!]!
          }
          type State {
            code: String
            country: Country!
            name: String!
          }
          type _Service {
            sdl: String
          }
          union _Entity = Continent | Country | Language
          input ContinentFilterInput {
            code: StringQueryOperatorInput
          }
          input CountryFilterInput {
            code: StringQueryOperatorInput
            continent: StringQueryOperatorInput
            currency: StringQueryOperatorInput
          }
          input LanguageFilterInput {
            code: StringQueryOperatorInput
          }
          input StringQueryOperatorInput {
            eq: String
            glob: String
            in: [String]
            ne: String
            nin: [String]
            regex: String
          }
    - role: supervisor
      definition:
        schema: |
          schema {
            query: Query
          }
          scalar _Any
          type Continent {
            code: ID!
            countries: [Country!]!
            name: String!
          }
          type Country {
            capital: String
            code: ID!
            continent: Continent!
            currency: String
            emoji: String!
            emojiU: String!
            languages: [Language!]!
            name: String!
            native: String!
            phone: String!
            states: [State!]!
          }
          type Language {
            code: ID!
            name: String
            native: String
            rtl: Boolean!
          }
          type Query {
            _entities(representations: [_Any!]!): [_Entity]!
            _service: _Service!
            continent(code: ID!): Continent
            continents(filter: ContinentFilterInput): [Continent!]!
            countries(filter: CountryFilterInput): [Country!]!
            country(code: ID!): Country
            language(code: ID!): Language
            languages(filter: LanguageFilterInput): [Language!]!
          }
          type State {
            code: String
            country: Country!
            name: String!
          }
          type _Service {
            sdl: String
          }
          union _Entity = Continent | Country | Language
          input ContinentFilterInput {
            code: StringQueryOperatorInput
          }
          input CountryFilterInput {
            code: StringQueryOperatorInput
            continent: StringQueryOperatorInput
            currency: StringQueryOperatorInput
          }
          input LanguageFilterInput {
            code: StringQueryOperatorInput
          }
          input StringQueryOperatorInput {
            eq: String
            glob: String
            in: [String]
            ne: String
            nin: [String]
            regex: String
          }
    - role: moderator
      definition:
        schema: |
          schema {
            query: Query
          }
          scalar _Any
          type Continent {
            code: ID!
            countries: [Country!]!
            name: String!
          }
          type Country {
            capital: String
            code: ID!
            continent: Continent!
            currency: String
            emoji: String!
            emojiU: String!
            languages: [Language!]!
            name: String!
            native: String!
            phone: String!
            states: [State!]!
          }
          type Language {
            code: ID!
            name: String
            native: String
            rtl: Boolean!
          }
          type Query {
            _entities(representations: [_Any!]!): [_Entity]!
            _service: _Service!
            continent(code: ID!): Continent
            continents(filter: ContinentFilterInput): [Continent!]!
            countries(filter: CountryFilterInput): [Country!]!
            country(code: ID!): Country
            language(code: ID!): Language
            languages(filter: LanguageFilterInput): [Language!]!
          }
          type State {
            code: String
            country: Country!
            name: String!
          }
          type _Service {
            sdl: String
          }
          union _Entity = Continent | Country | Language
          input ContinentFilterInput {
            code: StringQueryOperatorInput
          }
          input CountryFilterInput {
            code: StringQueryOperatorInput
            continent: StringQueryOperatorInput
            currency: StringQueryOperatorInput
          }
          input LanguageFilterInput {
            code: StringQueryOperatorInput
          }
          input StringQueryOperatorInput {
            eq: String
            glob: String
            in: [String]
            ne: String
            nin: [String]
            regex: String
          }
    - role: editor
      definition:
        schema: |
          schema {
            query: Query
          }
          scalar _Any
          type Continent {
            code: ID!
            countries: [Country!]!
            name: String!
          }
          type Country {
            capital: String
            code: ID!
            continent: Continent!
            currency: String
            emoji: String!
            emojiU: String!
            languages: [Language!]!
            name: String!
            native: String!
            phone: String!
            states: [State!]!
          }
          type Language {
            code: ID!
            name: String
            native: String
            rtl: Boolean!
          }
          type Query {
            _entities(representations: [_Any!]!): [_Entity]!
            _service: _Service!
            continent(code: ID!): Continent
            continents(filter: ContinentFilterInput): [Continent!]!
            countries(filter: CountryFilterInput): [Country!]!
            country(code: ID!): Country
            language(code: ID!): Language
            languages(filter: LanguageFilterInput): [Language!]!
          }
          type State {
            code: String
            country: Country!
            name: String!
          }
          type _Service {
            sdl: String
          }
          union _Entity = Continent | Country | Language
          input ContinentFilterInput {
            code: StringQueryOperatorInput
          }
          input CountryFilterInput {
            code: StringQueryOperatorInput
            continent: StringQueryOperatorInput
            currency: StringQueryOperatorInput
          }
          input LanguageFilterInput {
            code: StringQueryOperatorInput
          }
          input StringQueryOperatorInput {
            eq: String
            glob: String
            in: [String]
            ne: String
            nin: [String]
            regex: String
          }
