###
@graphqlEndpoint =  {{$dotenv HASURA_GRAPHQL_ENDPOINT}}/v1/graphql
@graphqlAdminToken =  {{$dotenv HASURA_GRAPHQL_ADMIN_SECRET}}
# set token without `''`
@graphqlUserToken =
###

### IntrospectionQuery
# @name IntrospectionQuery
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
X-REQUEST-TYPE: GraphQL

query IntrospectionQuery {
	__schema {
		types {
			name
			description
		}
		directives {
			name
			description
			locations
		}
	}
}

### list all active policies
# @name listPolicies
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
Authorization: Bearer {{graphqlUserToken}}
x-hasura-allowed-roles:  self supervisor
x-hasura-role: supervisor
x-hasura-org-id: chinthagunta
x-hasura-user-id: sumo@chinthagunta.com
X-REQUEST-TYPE: GraphQL

query ListPolicies(
  $limit: Int = 50
  $offset: Int = 0
  $orderBy: [policies_order_by!] = [{ updatedAt: desc_nulls_last }]
) {
  policies(
	order_by: $orderBy
    limit: $limit
    offset: $offset
  ) {
    id
    displayName
    description
    tags
    annotations
    disabled
    template
    createdAt
    createdBy
    updatedAt
    updatedBy
    validFrom
    validTo
    subjectDisplayName
    organization
    subjectId
    subjectSecondaryId
    subjectType
    sourceAddress
    sourcePort
    destinationAddress
    destinationPort
    protocol
    action
    direction
    appId
    weight
  }
}


{
  "limit": 5,
  "offset": 0
}

### search active policies for agent
# @name searchAgentPolicies
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
Authorization: Bearer {{graphqlUserToken}}
x-hasura-allowed-roles:  agent self supervisor
x-hasura-role: agent
x-hasura-org-id: chinthagunta
x-hasura-user-id: sumo@chinthagunta.com
X-REQUEST-TYPE: GraphQL

query SearchAgentPolicies(
  $where: policies_bool_exp
  $limit: Int = 50
  $offset: Int = 0
  $orderBy: [policies_order_by!] = [{ updatedAt: desc_nulls_last }]
) {
  policies(
    order_by: $orderBy
    limit: $limit
    offset: $offset
    where: $where
  ) {
    id
    displayName
    description
    validFrom
    validTo
    organization
    sourceAddress
    sourcePort
    destinationAddress
    destinationPort
    protocol
    action
    direction
    appId
    weight
  }
}

{
  "where": {
    "subjectType": { "_eq": "subject_type_user" },
    "displayName": { "_like": "%user%" }
  },
  "limit": 2,
  "orderBy": [{ "updatedAt": "desc_nulls_last" }]
}

### search active policies
# @name searchPolicies
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
Authorization: Bearer {{graphqlUserToken}}
x-hasura-allowed-roles:  self supervisor
x-hasura-role: self
x-hasura-org-id: chinthagunta
x-hasura-user-id: sumo@chinthagunta.com
X-REQUEST-TYPE: GraphQL

query SearchPolicies(
  $where: policies_bool_exp
  $limit: Int = 50
  $offset: Int = 0
  $orderBy: [policies_order_by!] = [{ updatedAt: desc_nulls_last }]
) {
  policies(
    order_by: $orderBy
    limit: $limit
    offset: $offset
    where: $where
  ) {
    id
    displayName
    description
    tags
    annotations
    disabled
    template
    createdAt
	createdBy
    updatedAt
	updatedBy
    validFrom
    validTo
    subjectDisplayName
    organization
    subjectId
    subjectSecondaryId
    subjectType
    sourceAddress
    sourcePort
    destinationAddress
    destinationPort
    protocol
    action
    direction
    appId
    weight
  }
}

{
  "where": {
    "subjectType": { "_eq": "subject_type_user" },
    "displayName": { "_like": "%user%" }
  },
  "limit": 2,
  "orderBy": [{ "updatedAt": "desc_nulls_last" }]
}

###
@firstPoliciyId =  {{searchPolicies.response.body.$.data.policies[0].id}}
###

### getPolicy by Id
# @name getPolicy
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
Authorization: Bearer {{graphqlUserToken}}
x-hasura-allowed-roles:  self supervisor
x-hasura-role: self
x-hasura-org-id: chinthagunta
x-hasura-user-id: sumo@chinthagunta.com
X-REQUEST-TYPE: GraphQL

query GetPolicy($id: uuid!) {
  policies_by_pk(id: $id) {
    id
    displayName
    description
    tags
    annotations
    disabled
    template
    createdAt
    createdBy
    updatedAt
    updatedBy
    validFrom
    validTo
    subjectDisplayName
    organization
    subjectId
    subjectSecondaryId
    subjectType
    sourceAddress
    sourcePort
    destinationAddress
    destinationPort
    protocol
    action
    direction
    appId
    weight
  }
}

{
  "id": "{{firstPoliciyId}}"
}

### update policiy by ID
# organization = x-hasura-org-id 	updatedBy = x-hasura-user-id
# @name updatePolicy
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
Authorization: Bearer {{graphqlUserToken}}
x-hasura-allowed-roles:  self supervisor
x-hasura-role: self
x-hasura-org-id: chinthagunta
x-hasura-user-id: sumo@chinthagunta.com
X-REQUEST-TYPE: GraphQL

mutation UpdatePolicy($id: uuid!, $data: policies_set_input!) {
  update_policies_by_pk(pk_columns: { id: $id }, _set: $data) {
    id,
	displayName,
    updatedAt
  }
}

{
  "id":"{{firstPoliciyId}}",
  "data":{
	"description":"user 1 policy v2",
    "tags":"{tz,us}",
    "annotations":"\"sumo\"=>\"demo1\""
  }
}

### create new policiy
# organization = x-hasura-org-id 	createdBy = x-hasura-user-id
# @name createPolicy
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
Authorization: Bearer {{graphqlUserToken}}
x-hasura-allowed-roles:  self supervisor
x-hasura-role: self
x-hasura-org-id: chinthagunta
x-hasura-user-id: sumo@chinthagunta.com
X-REQUEST-TYPE: GraphQL

mutation CreatePolicy($data: policies_insert_input!) {
  insert_policies_one(object: $data) {
    id,
	displayName,
	updatedAt
  }
}

{
  "data":{
    "displayName":"user 1",
    "description":"user 1 policy",
    "tags":"{tz,us}",
    "annotations":"\"sumo\"=>\"demo\"",
    "subjectId":"6e9bf365-8c09-4dd9-b9b2-83f6ab315618",
    "subjectSecondaryId":"sumo@chinthagunta.com",
    "subjectDisplayName":"sumanth chinthagunta",
    "subjectType":"subject_type_user",
    "sourceAddress":"0.0.0.0",
    "sourcePort":"5000",
    "destinationAddress":"1.1.1.1",
    "destinationPort":"443",
    "appId":"myapp.exe",
    "validFrom":"{{$datetime rfc1123|iso8601 [offset option]}}"
  }
}

###
@createdPoliciyId =  {{createPolicy.response.body.$.data.insert_policies_one.id}}
###

### delete policiy
# if null returned, either ID is not found or this user don't have permissions to delete
# @name deletePolicyFail
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
Authorization: Bearer {{graphqlUserToken}}
x-hasura-allowed-roles:  self supervisor
x-hasura-role: self
x-hasura-org-id: chinthagunta
x-hasura-user-id: sumo@chinthagunta.com
X-REQUEST-TYPE: GraphQL

mutation DeletePolicyFail($id:uuid!) {
  delete_policies_by_pk(id:  $id) {
      displayName
  }
}

{
  "id": "{{createdPoliciyId}}"
}

### delete policiy
# if null returned, either ID is not found or this user don't have permissions to delete
# @name deletePolicy
POST  {{graphqlEndpoint}}
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}
Authorization: Bearer {{graphqlUserToken}}
x-hasura-allowed-roles:  self supervisor
x-hasura-role: self
x-hasura-org-id: chinthagunta
x-hasura-user-id: sumo@chinthagunta.com
X-REQUEST-TYPE: GraphQL

mutation DeletePolicy($id: uuid!, $deletedAt: timestamptz!) {
	update_policies_by_pk(pk_columns: { id: $id }, _set: { deletedAt: $deletedAt }) {
		displayName
	}
}

{
  "id": "{{createdPoliciyId}}",
  "deletedAt": "{{$localDatetime iso8601}}"
}
